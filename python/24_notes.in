Template for each round:
inp w           | w is the digit
mul x 0         --| x = 0
add x z         --| x = incoming_z
mod x 26        --| x = (incoming_z % 26)
div z _A_       --| z = incoming_x // _A_
add x _B_       --| x = (incoming_z % 26) + _B_
eql x w         --| x = 1 if [w == (incoming_z % 26) + _B_] else 0
eql x 0         | x = 0 if [w == (incoming_z % 26) + _B_] else 1
mul y 0         --| y = 0
add y 25        --| y = 25
mul y x         --| y = 0 if [w == (incoming_z % 26) + _B_] else 25
add y 1         --| y = 1 if [w == (incoming_z % 26) + _B_] else 26
mul z y         | z = (incoming_z // _A_) if [w == (incoming_z % 26) + _B_] else 26 * incoming_z
mul y 0         --| y = 0
add y w         --| y = w
add y _C_       --| y = w + _C_
mul y x         | y = 0 if [w == (incoming_z % 26) + _B_] else (w + _C_)
add z y         | if [w == (incoming_z % 26) + _B_]: z = (incoming_z // _A_) else (26 * incoming_z) + (w + _C_)


inp w
mul x 0
add x z
mod x 26
div z 1
add x 12
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 7
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 10
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -2
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 6
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 11
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -5
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 1
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y

round 13:
inp w           | w is 13th digit            
mul x 0         --| x zerod out
add x z         --| x = incoming_z
mod x 26        --| x = incoming_z % 26
div z 26        --| z = incoming_z // 26
add x -14       --| x = (incoming_z % 26) - 14  ==> ranges from -14 to 11
eql x w         --| x = 1 if [w == (incoming_z % 26) - 14], 0 if not
eql x 0         | x = 0 if [w == (incoming_z % 26) - 14], 1 if not
mul y 0         --| y is zerod out
add y 25        --| y = 25
mul y x         --| y = 0 if [w == (incoming_z % 26) - 14] else 25
add y 1         --| y = 1 if [w == (incoming_z % 26) - 14] else 26
mul z y         | z = incoming_z // 26 if [w == (incoming_z % 26) - 14] else 26 * incoming_z // 26
mul y 0         --| y is zerod out
add y w         --| y = w
add y 4         --| y = w + 4
mul y x         | y = 0 if [w == (incoming_z % 26) - 14], else (w + 4)
add z y         | z = if [w == (incoming_z % 26) - 14]: incoming_z // 26 + 0 else (26 * incoming_z // 26) + w + 4
  z needs to be | 6 <= z + y <= 14

## z here needs to be last digit + 5 ##

round 14:  
inp w       | w = last digit (1 to 9)
mul x 0     --| x = 0
add x z     --| x = incoming_z
mod x 26    --| x = (incoming_z % 26)
div z 26    --| z = incoming_z // 26
add x -5    --| x = (incoming_z % 26) - 5
eql x w     --| x = 1 if [w == (incoming_z % 26) - 5] else 0
eql x 0     | x = 0 if [w == (incoming_z % 26) - 5] else 1
mul y 0     --| y = 0
add y 25    --| y = 25
mul y x     --| y = 0 if [w == (incoming_z % 26) - 5] else 25
add y 1     --| y = 1 if [w == (incoming_z % 26) - 5] else 26
mul z y     | z = incoming_z // 26 if [w == (incoming_z % 26) - 5] else 26 * (incoming_z // 26)
mul y 0     --| y = 0
add y w     --| y = w
add y 14    --| y = w + 14
mul y x     | y = 0 if [w == (incoming_z % 26) - 5] else (w + 14)
add z y     
if [w == (incoming_z % 26) - 5]:
    z = incoming_z // 26
    0 = incoming_z // 26
        -> incoming_z needs to be between 0 and 25
        w = (incoming_z % 26) - 5 
        w = incoming_z - 5
        incoming_z must be between 6 (w = 1) and 14 (w = 9)
else:
    z = (26 * (incoming_z // 26)) + w + 14

    if incoming_z >= 0:
        this is impossible because w would need to be negative
    if incoming_z < 0:
        w = (incoming_z rounded to the nearest multiple of 26) - 14
        w would need to be 12? 
            - that's impossible

z can never be negative:
- z // a_sequence number -> all a_sequence numbers are positive. this can never get z<0
- z * 26 + digit (1 to 9) + c_sequence. all c_sequence > 0. this can never get z<0

meaning:
inp w
- incoming z matters
    - divide z by 26
    - the integer part is z
    - the remainder is x
        - subtract 5, so it's range -5 to 20


if (incoming_z % 26)-5 = the last digit:
    x=0
    y=0
    z=z  <- if z was 0 (if incoming_z < 26)
else: <-- can't win that way
    x=1
    y=last_digit+14 (ranging 15 to 23)
    z=26*z (would need to be -23 to -15, none of which are multiples of 26)

- round 14 overall:
    - incoming_z needs to be <26 
    - incoming_z needs to be last digit + 5